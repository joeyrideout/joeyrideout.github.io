<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joey Rideout]]></title>
  <link href="http://joeyrideout.github.io/atom.xml" rel="self"/>
  <link href="http://joeyrideout.github.io/"/>
  <updated>2014-06-28T16:53:17-04:00</updated>
  <id>http://joeyrideout.github.io/</id>
  <author>
    <name><![CDATA[Joey Rideout]]></name>
    <email><![CDATA[joeyrrideout@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Math Work for You]]></title>
    <link href="http://joeyrideout.github.io/blog/2014/06/25/making-math-work-for-you/"/>
    <updated>2014-06-25T18:22:00-04:00</updated>
    <id>http://joeyrideout.github.io/blog/2014/06/25/making-math-work-for-you</id>
    <content type="html"><![CDATA[<p>“Why do you love Computer Science? Why do you love Math?”</p>

<p>As a Computer Science major, I get asked these questions all the time. I’ve come to the conclusion, however, that these two questions answer each other.</p>

<p>My high school did not have any Computer Science classes, but it had one heck of an honours Math program. This Math program squished grade 9 and 10 Math into our grade 9 year, in order to put us a year ahead and give us room for AP Calculus in our senior year.  It also put us in a classroom with the best Math teachers in our school (and arguably, the entire school district) along with an entire class of like-minded Mathies. This supportive and encouraging learning environment was very motivational, and I had always been “good at Math”, so I jumped right in.</p>

<p>Clever classmates and talented teachers were wonderful, but what really got me hooked on that Math class came as somewhat of a surprise – Computer Science.</p>

<!-- more -->


<p>My school’s lack of CS classes was not a hindrance; it merely forced me to cure my natural curiosity with computers outside of class. This self-motivated learning was, arguably, much better for me. I found myself indulging in fascinating topics that would normally never be taught at all in high school. Web development, cryptography, and information security were particularly fascinating to me.  What was more fascinating, though, was how learning about CS changed my opinion of Math.</p>

<p>It became fun.</p>

<p>My prior opinion of Math was that it is, if you’ll forgive the term, a chore. My classmates and I were always fighting against functions and banging our heads against our calculators until a number popped out that we could write down. Many uphill battles were being fought as we constantly tried to tame variables in order to get the grades we needed and move on. Although the concepts were intriguing and getting the correct answer was satisfying, something was missing.</p>

<p>And then I learned how to code.</p>

<p>Variables became alarmingly useful constructs, and functions suddenly had a practical purpose. Everything I had learned in Math became applicable. Even Calculus became a wonderful thing, now that I knew it had badass applications such as Elliptic Curve Cryptography.</p>

<p>Learning to code made Math work for me, not against me.</p>

<p>Now I wonder how much more fun Math would have been for me if I had learned to code earlier. If my school taught Computer Science, or if I had learned to code in middle school, I would have discovered this passion for Math and CS much earlier. I can only wonder how many other students could have exceled in Math at a much earlier age if they had been introduced to Computer Science.</p>

<p>Computer Science should be taught alongside Math in school, because it is capable of giving students a love of both. Of course Math and CS aren’t for everyone, but no subject taught in school really is. But then again, learning about Computer Science has the added benefit of giving students technical skills that they will use for the rest of their lives, so it’s a win-win. That works for me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Hackathon]]></title>
    <link href="http://joeyrideout.github.io/blog/2014/01/26/my-first-hackathon/"/>
    <updated>2014-01-26T15:56:00-05:00</updated>
    <id>http://joeyrideout.github.io/blog/2014/01/26/my-first-hackathon</id>
    <content type="html"><![CDATA[<p>Two days ago, at 4:30pm, I walked out of residence with my friend and we headed towards the 2014 Facebook Hackathon at the University of Waterloo. I went in with an open mind, expecting to get to work immediately and write code for twenty-four hours straight.</p>

<p>It was not what I expected.</p>

<!-- more -->


<p>I mean, we did code as much as possible for twenty-four hours, but the Facebook Hackathon was much more than that. I had underestimated the learning potential of getting over two hundred hackers and one deadline under one roof. I had also underestimated the atmosphere and camaraderie generated by getting so many people to pull an all-nighter together. Mix in some very friendly and experienced Facebook employees, a pile of food, caffeine, and raffle prizes, and you have an amazing time.</p>

<p>Almost immediately after entering the building, a pair of hackers called over my friend and I and offered to form a team of four. Awesome. These two were more experienced than my friend and I, but we were willing to learn. And that’s sure what we did. We began work on a secure, browser-based video chatting web application called SoundProof. The idea was to set up a secure, “sound proof” communication tunnel between people on the web. It was a cool and interesting idea, but an incredibly difficult one that would require us learning quite a few new technologies.</p>

<p>Thus begins the story of how I became acquainted with Ruby on Rails, Foundation, Javascript, Node.js, HTML5, Firebase, and WebRTC in less than 24 hours.</p>

<p>Ruby on Rails was the platform of choice for our web app, with a Foundation CSS responsive front-end design. As the Rails hacker on our team got to work, I learned enough about Rails so that I could contribute some front-end design work with the easier-to-learn Foundation. We set up a GitHub repository and an instance of our work-in-progress app on Heroku, and got to work. Looming over us, however, was this standard called WebRTC that was required to make plugin-free, browser-based video communication possible. After finishing some preliminary design work, I dug in to WebRTC.</p>

<p>WebRTC is complex. It uses something called a signalling server to coordinate a communication between two clients, passing on information such as IP addresses and NAT configurations. Those configurations would then be used to set up WebSockets between the two client browsers. Then, an audio-video stream is taken from each client’s webcam using the magic of HTML5 and a function called getUserMedia(), which would then interface with WebRTC and stream data in real time.</p>

<p>Getting this working would require me learning a bit of HTML5 and some Javascript, so I did. Then I found some example WebRTC implementations and started hacking together something that would (hopefully) work out of the box with our Rails app. I managed to get the client-side aspect working, generating and displaying the client’s webcam stream back to that client. Now we had to, for lack of a better phrase, cross the streams!</p>

<p>To connect two clients, we had to either have our Rails web-app act as the signalling server or figure out how to coordinate with a pre-existing, third-party signalling server. We were stuck, and called a Facebook engineer over to help. (That last sentence, by the way, was one of the reasons this hackathon was truly great.)  He suggested ditching Rails and using Node.js, because apparently Node can handle real time communication where Rails cannot. He also noted, rather accurately, that “doing video is hard”. In hindsight I think we should have continued working with Rails anyway, because WebRTC establishes real time communication between two clients and not the server. But, at 6am, we decided to start learning Node.</p>

<p>Long story short, we did not make much more progress with our app. We ended up adding text chat room functionality via Firebase, but could not get WebRTC working correctly in what time we had left. So we crafted a nice two-minute pitch of what we built to the panel of Facebook engineers at the end of the hackathon, and called it a day. Some hackers in the room managed to put together some incredible apps, and the long list of over forty groups who presented was quite impressive.</p>

<p>I learned a lot, and will be coming back for more next year. In order to bring my A-game next time, I have some reading to do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Octopress on GitHub Pages Using Windows 8]]></title>
    <link href="http://joeyrideout.github.io/blog/2013/07/07/setting-up-octopress-on-github-pages/"/>
    <updated>2013-07-07T21:49:00-04:00</updated>
    <id>http://joeyrideout.github.io/blog/2013/07/07/setting-up-octopress-on-github-pages</id>
    <content type="html"><![CDATA[<p>I recently finished getting this Octopress blog running on GitHub Pages, and I couldn&rsquo;t be happier with the result. It took a bit of work to get up and running, however, so I figured that I should document some of the hoops I had to jump through on Windows to get this blog deployed. The <a href="http://octopress.org/docs/setup/">default installation instructions for Octopress</a> were generally okay, but a couple of unexpected errors arose that left me hanging.</p>

<!-- more -->


<p>Of course, you need to <a href="http://git-scm.com/">install Git</a> in order to start working with GitHub Pages. However, Octopress did not cooperate with my Git installation until I added <em>Git.exe</em> to my system&rsquo;s PATH. To do that, right-click on <em>My Computer</em>, select <em>Properties</em>, and then <em>Advanced system settings</em>. From the <em>Advanced</em> tab that you are currently on, click the <em>Environment Variables</em> button at the bottom. Edit <em>Path</em> and add the directory with your newly installed Git executable, separated from the last entry with a semicolon. For example, <code>&hellip;;C:\Program Files (x86)\Git\bin</code></p>

<p>You will also need to install Ruby 1.9.3 as well as the Ruby DevKit that Octopress depends on. The original Octopress guide does not provide Windows installation instructions for Ruby, but you can find some convenient Windows installers <a href="http://rubyinstaller.org/downloads/">here</a>. The Ruby installer is automatic, but the DevKit needs to be manually extracted into a permanent installation folder of your choice (I used <code>C:\DevKit</code>). After installing Ruby and extracting the DevKit, open up Windows PowerShell and do the following to install:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>C:/DevKit
</span><span class='line'>ruby dk.rb init
</span><span class='line'>ruby dk.rb install
</span></code></pre></td></tr></table></div></figure>


<p>After getting those software packages installed, you should be able to follow the rest of Octopress&#8217; installation instructions without any problems. I will paraphrase the steps below.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> <span class="o">[</span>path to your GitHub directory<span class="o">]</span>/GitHub/
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'><span class="nb">cd </span>octopress
</span><span class='line'>ruby --version <span class="c"># Assert that Ruby 1.9.3 is installed and working</span>
</span><span class='line'>
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'>rake install <span class="c"># Installs default theme</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that Octopress is installed, it&rsquo;s time to <a href="http://octopress.org/docs/deploying/github/">deploy your site to GitHub</a>. Note that all of your blog administration will be run from the <code>/GitHub/octopress</code> directory, and not from your site&rsquo;s directory that will be generated in the next step.</p>

<p>Assuming you have already <a href="https://github.com/">signed up with GitHub</a>, create a repository <code>username.github.io</code> where <code>username</code> is your GitHub username. Note that the Octopress deployment instructions call for you to use a <code>.com</code> user domain; due to recent changes to GitHub Pages, however, <code>.io</code> domains are now used for all pages.</p>

<p>Next, still from your <code>octopress</code> directory, run the command:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>This gets Octopress ready to publish your site to GitHub Pages. It sets your <em>master</em> branch to <code>_deploy</code>, which is the content that will be published on your <code>username.github.io</code> site. The <code>source</code> directory of your Octopress site is set to the <em>source</em> active branch. To finish deploying your site, run the following:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>Your site has now been generated and published to your <code>username.github.io</code> domain. It took ten minutes for mine to appear initially. Be sure to commit the source branch of your Octopress site to GitHub whenever you make changes.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;commit message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you&rsquo;re ready to get <a href="http://octopress.org/docs/blogging/">blogging with Octopress</a>. All you have to do after updating your site is run the <code>rake generate</code> and <code>rake deploy</code> commands and commit your source branch again to backup your Octopress files.</p>

<p>Happy blogging!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Am Creating This Blog]]></title>
    <link href="http://joeyrideout.github.io/blog/2013/07/07/why-i-am-creating-this-blog/"/>
    <updated>2013-07-07T21:36:00-04:00</updated>
    <id>http://joeyrideout.github.io/blog/2013/07/07/why-i-am-creating-this-blog</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Side Projects</h2>


<p>The main reason I set this website up is to have a place to discuss and showcase side projects that I will work on in the years to come. I’m about to start my first year of university studying Computer Science, and will hopefully produce plenty of interesting projects and ideas that I can populate this site with. I currently do not have any notable side projects, but in a way this site is my first side project. To get up and running I had to learn <a href="http://joeyrideout.github.io/blog/2013/07/07/setting-up-octopress-on-github-pages/">how to work with the Octopress blogging framework</a>, and to host it I had to finally learn how to work with GitHub.</p>

<h2>Networking</h2>


<p>The other important reason I have to set up this site is communication. I would like to meet more people with similar interests, and this site will be a great way to introduce myself. If you are reading this blog and would like to introduce yourself, feel free to contact me!</p>

<h2>Photography</h2>


<p>Lastly, I would like to use this site to showcase some of my photography. I have been taking photos as a hobby for roughly five years now, and would like a public place to share (and possibly sell) my work. I plan on creating a page on this site dedicated to showcasing my photos soon!</p>
]]></content>
  </entry>
  
</feed>
